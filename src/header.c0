#use <conio>

struct header {
    int id;
    int qr;
    int opcode;
    int aa;
    int tc;
    int rd;
    int ra;
    int z; // reserved
    int rcode; // response code
    int qdcount;
    int ancount;
    int nscount;
    int arcount;
};

// response codes
int rcode_no_error() {
    return 0;
}

int rcode_format_error() {
    return 1;
}

int rcode_server_failure() {
    return 2;
}

int rcode_name_error() {
    return 3;
}

int rcode_not_implemented() {
    return 4;
}

int rcode_refused() {
    return 5;
}

bool rcode_is_reserved(int rc) {
    return rc >= 6 && rc <= 15;
}

void split_byte(int byte, int* dest1, int* dest2){
    *dest1 = byte & 0xFFFF;
    *dest2 = byte >> 8;
}

void line2split(int line2, struct header* dest){

}

int parse_header(int offset, int[] data, struct header* dest) {
  int* line1 = alloc(int);
  int* line2 = alloc(int);

  split_byte(data[offset], line1, line2);
  dest->id = *line1;
  offset = offset + 1;

  line2split(*line2, dest);

  int* line3 = alloc(int);
  int* line4 = alloc(int);
  int* line5 = alloc(int);
  int* line6 = alloc(int);

  split_byte(data[offset], line3, line4);
  offset = offset + 1;

  split_byte(data[offset], line5, line6);
  offset = offset + 1;

  dest->qdcount = *line3;
  dest->ancount = *line4;
  dest->nscount = *line5;
  dest->arcount = *line6;

  return offset;
}

int main(){
int x=0xffff;
int y= 400;
int z=y&x;
int w=y>>8;
printint(w);

    return 0;
}