#use <conio>
#use "bit_utils.c0"

struct header {
    int id;
    int qr;
    int opcode;
    int aa;
    int tc;
    int rd;
    int ra;
    int z; // reserved
    int rcode; // response code
    int qdcount;
    int ancount;
    int nscount;
    int arcount;
};

typedef struct header* header;

// response codes
int rcode_no_error() {
    return 0;
}

int rcode_format_error() {
    return 1;
}

int rcode_server_failure() {
    return 2;
}

int rcode_name_error() {
    return 3;
}

int rcode_not_implemented() {
    return 4;
}

int rcode_refused() {
    return 5;
}

bool rcode_is_reserved(int rc) {
    return rc >= 6 && rc <= 15;
}


// The cursor is a *bit* index, not an index into the array.
header parse_header(int* cursor, int[] data) {
    header hd = alloc(struct header);

    hd->id = read_bits(cursor, data, 16);
    hd->qr = read_bits(cursor, data, 1);
    hd->opcode = read_bits(cursor, data, 4);
    hd->aa = read_bits(cursor, data, 1);
    hd->tc = read_bits(cursor, data, 1);
    hd->rd = read_bits(cursor, data, 1);
    hd->ra = read_bits(cursor, data, 1);
    hd->z = read_bits(cursor, data, 3);
    hd->rcode = read_bits(cursor, data, 4);

    hd->qdcount = read_bits(cursor, data, 16);
    hd->ancount = read_bits(cursor, data, 16);
    hd->nscount = read_bits(cursor, data, 16);
    hd->arcount = read_bits(cursor, data, 16);

    return hd;
}

int print_header(int cursor, int[] data, struct header* input){

    cursor = write_bits(cursor, data, 16, input->id );
    cursor = write_bits(cursor, data, 1, input->qr );
    cursor = write_bits(cursor, data, 4, input->opcode );
    cursor = write_bits(cursor, data, 1, input->aa );
    cursor = write_bits(cursor, data, 1, input->tc );
    cursor = write_bits(cursor, data, 1, input->rd );
    cursor = write_bits(cursor, data, 1, input->ra );
    cursor = write_bits(cursor, data, 3, input->z );
    cursor = write_bits(cursor, data, 4, input->rcode );
    cursor = write_bits(cursor, data, 16, input->qdcount );

    cursor = write_bits(cursor, data, 16, input->ancount );
    cursor = write_bits(cursor, data, 16, input->nscount );
    cursor = write_bits(cursor, data, 16, input->arcount );

    return cursor;
}
