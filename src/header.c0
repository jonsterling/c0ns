#use <conio>
#use "bit_utils.c0"

struct header {
    int id;
    int qr;
    int opcode;
    int aa;
    int tc;
    int rd;
    int ra;
    int z; // reserved
    int rcode; // response code
    int qdcount;
    int ancount;
    int nscount;
    int arcount;
};

typedef struct header* header;

// response codes
int rcode_no_error() {
    return 0;
}

int rcode_format_error() {
    return 1;
}

int rcode_server_failure() {
    return 2;
}

int rcode_name_error() {
    return 3;
}

int rcode_not_implemented() {
    return 4;
}

int rcode_refused() {
    return 5;
}

bool rcode_is_reserved(int rc) {
    return rc >= 6 && rc <= 15;
}


header parse_header(cursor cur, int[] data) {
    header hd = alloc(struct header);

    hd->id = read_bits(cur, data, 16);
    hd->qr = read_bits(cur, data, 1);
    hd->opcode = read_bits(cur, data, 4);
    hd->aa = read_bits(cur, data, 1);
    hd->tc = read_bits(cur, data, 1);
    hd->rd = read_bits(cur, data, 1);
    hd->ra = read_bits(cur, data, 1);
    hd->z = read_bits(cur, data, 3);
    hd->rcode = read_bits(cur, data, 4);

    hd->qdcount = read_bits(cur, data, 16);
    hd->ancount = read_bits(cur, data, 16);
    hd->nscount = read_bits(cur, data, 16);
    hd->arcount = read_bits(cur, data, 16);

    return hd;
}

void print_header(cursor cur, int[] data, header hd) {
    write_bits(cur, data, 16, hd->id);
    write_bits(cur, data, 1, hd->qr);
    write_bits(cur, data, 4, hd->opcode);
    write_bits(cur, data, 1, hd->aa);
    write_bits(cur, data, 1, hd->tc);
    write_bits(cur, data, 1, hd->rd);
    write_bits(cur, data, 1, hd->ra);
    write_bits(cur, data, 3, hd->z);
    write_bits(cur, data, 4, hd->rcode);
    write_bits(cur, data, 16, hd->qdcount);
    write_bits(cur, data, 16, hd->ancount);
    write_bits(cur, data, 16, hd->nscount);
    write_bits(cur, data, 16, hd->arcount);
}

int header_size() {
    return 6 * 16;
}

