#use <conio>
#use "bit_utils.c0"

struct header {
    int id;
    int qr;
    int opcode;
    int aa;
    int tc;
    int rd;
    int ra;
    int z; // reserved
    int rcode; // response code
    int qdcount;
    int ancount;
    int nscount;
    int arcount;
};

// response codes
int rcode_no_error() {
    return 0;
}

int rcode_format_error() {
    return 1;
}

int rcode_server_failure() {
    return 2;
}

int rcode_name_error() {
    return 3;
}

int rcode_not_implemented() {
    return 4;
}

int rcode_refused() {
    return 5;
}

bool rcode_is_reserved(int rc) {
    return rc >= 6 && rc <= 15;
}


// The cursor is a *bit* index, not an index into the array.
int parse_header(int cursor, int[] data, struct header* dest) {
    int* id = alloc(int);
    int* qr = alloc(int);
    int* opcode = alloc(int);
    int* aa = alloc(int);
    int* tc = alloc(int);
    int* rd = alloc(int);
    int* ra = alloc(int);
    int* z = alloc(int);
    int* rcode = alloc(int);
    int* qdcount = alloc(int);
    int* ancount = alloc(int);
    int* nscount = alloc(int);
    int* arcount = alloc(int);

    cursor = read_bits(cursor, data, 16, id);
    cursor = read_bits(cursor, data, 1, qr);
    cursor = read_bits(cursor, data, 4, opcode);
    cursor = read_bits(cursor, data, 1, aa);
    cursor = read_bits(cursor, data, 1, tc);
    cursor = read_bits(cursor, data, 1, rd);
    cursor = read_bits(cursor, data, 1, ra);
    cursor = read_bits(cursor, data, 3, z);
    cursor = read_bits(cursor, data, 4, rcode);
    cursor = read_bits(cursor, data, 16, qdcount);
    cursor = read_bits(cursor, data, 16, ancount);
    cursor = read_bits(cursor, data, 16, nscount);
    cursor = read_bits(cursor, data, 16, arcount);

    dest->id = *id;
    dest->qr = *qr;
    dest->opcode = *opcode;
    dest->aa = *aa;
    dest->tc = *tc;
    dest->rd = *rd;
    dest->ra = *ra;
    dest->z = *z;
    dest->rcode = *rcode;
    dest->qdcount = *qdcount;
    dest->ancount = *ancount;
    dest->nscount = *nscount;
    dest->arcount = *arcount;


    return cursor;
}

int print_header(int cursor, int[] data, struct header* input){

    cursor = write_bits(cursor, data, 16, input->id );
    cursor = write_bits(cursor, data, 1, input->qr );
    cursor = write_bits(cursor, data, 4, input->opcode );
    cursor = write_bits(cursor, data, 1, input->aa );
    cursor = write_bits(cursor, data, 1, input->tc );
    cursor = write_bits(cursor, data, 1, input->rd );
    cursor = write_bits(cursor, data, 1, input->ra );
    cursor = write_bits(cursor, data, 3, input->z );
    cursor = write_bits(cursor, data, 4, input->rcode );
    cursor = write_bits(cursor, data, 16, input->qdcount );

    cursor = write_bits(cursor, data, 16, input->ancount );
    cursor = write_bits(cursor, data, 16, input->nscount );
    cursor = write_bits(cursor, data, 16, input->arcount );

    return cursor;
}
