#use <string>
#use "cursor.c0"

int get_mask(int index, int size)
//@requires size < 32 && size >= 0;
//@requires index < 32 && index >= 0;
{
    return ((1 << size) - 1) << index;
}

int get_bits(int index, int size, int data)
//@requires size < 32 && size >= 0;
//@requires index < 32 && index >= 0;
{
    return (data & get_mask(index, size)) >> index;
}

int set_bits(int data, int index, int size, int value)
//@requires size < 32 && size >= 0;
//@requires index < 32 && index >= 0;
{
    return (data & ~(get_mask(index, size))) | (value << index);
}

int read_bits(cursor cur, int[] bytes, int numBits)
//@requires numBits <= 32;
{
    int indexBits = cursor_get(cur);

    int index = indexBits / 32;
    int rem = indexBits % 32;

    cursor_advance(cur, numBits);

    if (rem + numBits > 32) {
        int len1 = 32 - rem;
        int len2 = numBits - len1;
        int value1 = get_bits(rem, len1, bytes[index]);
        int value2 = get_bits(0, len2, bytes[index+1]);
        int value = set_bits(value1, len1, len2, value2);
        return value;
    }

    if (rem == 0 && numBits == 32) {
        return bytes[index];
    }

    return get_bits(rem, numBits, bytes[index]);
}

void write_bits(cursor cur, int[] bytes, int numBits, int data) 
//@requires cursor_get(cur) + numBits <= \length(bytes) * 32;
//@requires cur != NULL;
{
    int indexBits = cursor_get(cur);
    int index = indexBits / 32;
    int rem = indexBits % 32;

    if (rem + numBits > 32) {
        int len1 = 32 - rem;
        int len2 = numBits - len1;
        int data1 = get_bits(0, len1, data);
        int data2 = get_bits(len1, len2, data);

        //@assert 0 <= index;
        //@assert index + 1 < \length(bytes);
        bytes[index] = set_bits(bytes[index], rem, len1, data1);
        bytes[index+1] = set_bits(bytes[index], 0, len2, data2);
    }

    else if (rem == 0 && numBits == 32) {
        //@assert 0 <= index;
        //@assert index < \length(bytes);
        bytes[index] = data;
    }

    else {
        //@assert 0 <= index;
        //@assert index < \length(bytes);
        bytes[index] = set_bits(bytes[index], rem, numBits, data);
    }

    cursor_advance(cur, numBits);
}

void write_string(cursor cur, int[] data, string str)
//@requires cursor_get(cur) % 8 == 0;
//@requires (\length(data) * 32) - cursor_get(cur) >= string_length(str) * 8;
{
    int len = string_length(str);
    write_bits(cur, data, 8, len);

    char[] chars = string_to_chararray(str);
    for (int i = 0; i < len; i++) {
        int octet = char_ord(chars[i]);
        write_bits(cur, data, 8, octet);
    }
}

string read_string(cursor cur, int[] data)
//@requires cur != NULL;
//@requires cursor_get(cur) % 8 == 0;
//@requires cursor_get(cur) < \length(data) * 32;
{
    int len = read_bits(cur, data, 8);

    char[] chars = alloc_array(char, len + 1);
    for (int i = 0; i < len; i++) {
        chars[i] = char_chr(read_bits(cur, data, 8));
    }

    return string_from_chararray(chars);
}
