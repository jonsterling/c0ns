#use <string>


int get_mask(int index, int size)
//@requires size <= 32;
//@requires index < 32;
{
    return ((1 << size) - 1) << index;
}

int extract_bits(int index, int size, int data)
//@requires size <= 32;
//@requires index < 32;
{
    return (data & get_mask(index, size)) >> index;
}

int pack_bits(int data, int index, int size, int value)
//@requires size <= 32;
//@requires index < 32;
{
    return (data & ~(get_mask(index, size))) | (value << index);
}


int read_bits(int cursor, int[] data, int numBits, int* dest)
//@requires numBits <= 32;
{
    int index = cursor / 32;
    if(numBits<32)
        *dest = extract_bits(cursor % 32, numBits, data[index]);
    else
        *dest=data[index];
    return cursor + numBits;
}



int write_bits(int cursor, int[] destData, int numBits, int data)
//@requires numBits <= 32;
{
    int index = cursor / 32;
    int offset = cursor % 32;


//    data = data & ((1<<numBits)-1); //force zeroing preceding bits in source data
    if(numBits<32)
        destData[index] = pack_bits(destData[index], offset, numBits, data);
    else
        destData[index]=data;

//destData[index] & (~(((1<<numBits)-1)<<offset));	//force zeroing target bits before copying
//    destData[index] = destData[index] | data<<(offset);

    return cursor + numBits;
}


int write_string(int cursor, int[] data, string str)
//@requires cursor % 8 == 0;
//@requires (\length(data) * 32) - cursor >= string_length(str) * 8;
{
    int len = string_length(str);
    cursor = write_bits(cursor, data, 8, len);

    char[] chars = string_to_chararray(str);
    for (int i = 0; i < len; i++) {
        int octet= char_ord(chars[i]);
        cursor = write_bits(cursor, data, 8, octet);

    }
    return cursor;
}

int read_string(int cursor, int[] data, string* dest)
//@requires cursor % 8 == 0;
//@requires cursor < \length(data) * 32;
{
    int* len = alloc(int);
    cursor = read_bits(cursor, data, 8, len);

    char[] chars = alloc_array(char, *len + 1);

    for (int i = 0; i < *len; i++) {
        int* octet = alloc(int);
        cursor = read_bits(cursor, data, 8, octet);
        chars[i] = char_chr(*octet);
    }

    *dest = string_from_chararray(chars);
    return cursor;
}