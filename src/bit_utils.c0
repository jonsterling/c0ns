#use <string>
#use "cursor.c0"

int get_mask(int index, int size)
//@requires size <= 32;
//@requires index < 32;
{
    return ((1 << size) - 1) << index;
}

int extract_bits(int index, int size, int data)
//@requires size <= 32;
//@requires index < 32;
{
    return (data & get_mask(index, size)) >> index;
}

int pack_bits(int data, int index, int size, int value)
//@requires size <= 32;
//@requires index < 32;
{
    return (data & ~(get_mask(index, size))) | (value << index);
}

int read_bits(cursor cur, int[] data, int numBits)
//@requires numBits <= 32;
{
    int indexBits = cursor_get(cur);

    int index = indexBits / 32;
    int rem = indexBits % 32;

    cursor_advance(cur, numBits);

    if(numBits<32)
        return extract_bits(rem, numBits, data[index]);
    else
        return data[index];
}

void write_bits2(cursor cur, int[] destData, int numBits, int data)
//@requires cur != NULL;
{
    int indexBits = cursor_get(cur);
    int index = indexBits / 32;
    int offset = indexBits % 32;

    if(numBits<32)
        destData[index] = pack_bits(destData[index], offset, numBits, data);
    else
        destData[index] = data;

    cursor_advance(cur, numBits);
}

int write_bits(int cur, int[] destData, int numBits, int data)
//@requires numBits <= 32;
{
    int index = cur / 32;
    int offset = cur % 32;

    if(numBits<32)
        destData[index] = pack_bits(destData[index], offset, numBits, data);
    else
        destData[index]=data;

    return cur + numBits;
}


void write_string2(cursor cur, int[] data, string str)
//@requires cursor_get(cur) % 8 == 0;
//@requires (\length(data) * 32) - cursor_get(cur) >= string_length(str) * 8;
{
    int len = string_length(str);
    write_bits2(cur, data, 8, len);

    char[] chars = string_to_chararray(str);
    for (int i = 0; i < len; i++) {
        int octet = char_ord(chars[i]);
        write_bits2(cur, data, 8, octet);
    }
}

int write_string(int cur, int[] data, string str)
//@requires cur % 8 == 0;
//@requires (\length(data) * 32) - cur >= string_length(str) * 8;
{
    int len = string_length(str);
    cur = write_bits(cur, data, 8, len);

    char[] chars = string_to_chararray(str);
    for (int i = 0; i < len; i++) {
        int octet = char_ord(chars[i]);
        cur = write_bits(cur, data, 8, octet);

    }
    return cur;
}

string read_string(cursor cur, int[] data)
//@requires cur != NULL;
//@requires cursor_get(cur) % 8 == 0;
//@requires cursor_get(cur) < \length(data) * 32;
{
    int len = read_bits(cur, data, 8);

    char[] chars = alloc_array(char, len + 1);
    for (int i = 0; i < len; i++) {
        chars[i] = char_chr(read_bits(cur, data, 8));
    }

    return string_from_chararray(chars);
}
