#use <conio>

struct bytearray {
    int length;
    int[] bytes;
};

typedef struct bytearray* bytearray;

void debug_bytearray(bytearray bs)
//@requires bs != NULL;
{
    print("[");
    for (int i = 0; i < bs->length; i++) {
        if (i != 0) {
            print(" | ");
        }
        else {
            print(" ");
        }

        printint(bs->bytes[i]);
    }
    print(" ]");
    flush();
}

bytearray bytearray_new(int len, int[] bs)
//@requires len == \length(bs);
{
    bytearray arr = alloc(struct bytearray);
    arr->length = len;
    arr->bytes = bs;
    return arr;
}

void assert_bytes_eq(bytearray bs1, bytearray bs2)
//@requires bs1 != NULL && bs2 != NULL;
{
    int l1 = bs1->length;
    int l2 = bs2->length;

    if (l1 != l2) {
        print("Equating following two byte arrays: \n    ");
        debug_bytearray(bs1);
        print("\nvs.\n    ");
        debug_bytearray(bs2);
        print("\n");
        flush();

        string msg = "Byte arrays of different lengths: ";
        msg = string_join(msg, string_fromint(l1));
        msg = string_join(msg, " vs. ");
        msg = string_join(msg, string_fromint(l2));
        error(msg);
    }

    for (int i = 0; i < l1; i++) {
        int x1 = bs1->bytes[i];
        int x2 = bs2->bytes[i];

        if (x1 != x2) {
            print("Equating following two byte arrays: \n    ");
            debug_bytearray(bs1);
            print("\nvs.\n    ");
            debug_bytearray(bs2);
            print("\n");
            flush();

            error("Test failed");
            //break;
        }
    }
}

