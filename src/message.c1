#use <conio>

#use "header.c0"
#use "resource_record.c1"
#use "bit_utils.c0"
#use "question.c0"
#use "cursor.c0"
#use "bytearray.c0"

struct message {
    header header;
    question[] question;
    resource_record[] answer;
    resource_record[] authority;
    resource_record[] additional;
};

typedef struct message* message;

int message_octets(message msg)
//@requires msg != NULL;
{
    int octets = header_octets();

    header hd = msg->header;

    for (int i = 0; i < hd->qdcount; i++) {
        octets += question_octets(msg->question[i]);
    }

    for (int i = 0; i < hd->ancount; i++) {
        octets += resource_record_octets(msg->answer[i]);
    }

    for (int i = 0; i < hd->nscount; i++) {
        octets += resource_record_octets(msg->authority[i]);
    }

    for (int i = 0; i < hd->arcount; i++) {
        octets += resource_record_octets(msg->additional[i]);
    }

    return octets;
}

message parse_message(int[] data)
//@ensures \result != NULL;
{
    cursor cur = cursor_new(0);

    message msg = alloc(struct message);
    msg->header = parse_header(cur, data);
    header hd = msg->header;

    msg->question = alloc_array(question, hd->qdcount);
    msg->answer = alloc_array(resource_record, hd->ancount);
    msg->authority = alloc_array(resource_record, hd->nscount);
    msg->additional = alloc_array(resource_record, hd->arcount);

    for (int i = 0; i < hd->qdcount; i++) {
        msg->question[i] = parse_question(cur, data);
    }

    for (int i = 0; i < hd->ancount; i++) {
        msg->answer[i] = parse_resource_record(cur, data);
    }

    for (int i = 0; i < hd->nscount; i++) {
        msg->authority[i] = parse_resource_record(cur, data);
    }

    for (int i = 0; i < hd->arcount; i++) {
        msg->additional[i] = parse_resource_record(cur, data);
    }

    return msg;
}

bytearray write_message(message msg)
//@requires msg != NULL;
//@ensures \result != NULL;
{
    header hd = msg->header;
    int octets = message_octets(msg);
    int bytes = (octets / 4) + (octets % 4 > 0 ? 1 : 0);

    int[] bs = alloc_array(int, bytes);

    cursor cur = cursor_new(0);
    print_header(cur, bs, msg->header);

    for (int i = 0; i < hd->qdcount; i++) {
        print_question(cur, bs, msg->question[i]);
    }

    for (int i = 0; i < hd->ancount; i++) {
        print_resource_record(cur, bs, msg->answer[i]);
    }

    for (int i = 0; i < hd->nscount; i++) {
        print_resource_record(cur, bs, msg->authority[i]);
    }

    for (int i = 0; i < hd->arcount; i++) {
        print_resource_record(cur, bs, msg->additional[i]);
    }

    return bytearray_new(bytes, bs);
}

void test_roundtrip(message msg)
//@requires msg != NULL;
{

    bytearray bs = write_message(msg);
    message msg2 = parse_message(bs->bytes);
    bytearray bs2 = write_message(msg2);

    assert_bytes_eq(bs, bs2);
}
