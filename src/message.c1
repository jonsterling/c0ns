#use <conio>

#use "header.c0"
#use "resource_record.c1"
#use "bit_utils.c0"
#use "question.c0"


// TODO: would be nicer to have arrays of structs rather than arrays of pointers to structs, wasn't
// sure how to assign to it
// FARZANEH: why?
struct message {
    struct header* header;
    struct question*[] question;
    struct resource_record*[] answer;
    struct resource_record*[] authority;
    struct resource_record*[] additional;
};


struct message* parse_message(int[] data)
//@ensures \result != NULL;
{
    int cursor = 0;
    struct message* dest = alloc(struct message);
    struct header* header = alloc(struct header);
    cursor = parse_header(cursor, data, header);

    int qdcount = header->qdcount;
    struct question*[] questions = alloc_array(struct question*, qdcount);

    for (int i = 0; i < qdcount; i++) {
        questions[i] = alloc(struct question);
        cursor = parse_question(cursor, data, questions[i]);
    }


    int ancount = header->ancount;
    struct resource_record*[] answers = alloc_array(struct resource_record*, ancount);

    for (int i = 0; i < ancount; i++) {
        answers[i] = alloc(struct resource_record);
        cursor = parse_resource_record(cursor, data, answers[i]);
    }

    int nscount = header->nscount;
    struct resource_record*[] auths = alloc_array(struct resource_record*, nscount);

    for (int i = 0; i < nscount; i++) {
        auths[i] = alloc(struct resource_record);
        cursor = parse_resource_record(cursor, data, auths[i]);
    }

    int arcount = header->arcount;
    struct resource_record*[] additionals = alloc_array(struct resource_record*, arcount);

    for (int i = 0; i < arcount; i++) {
        additionals[i] = alloc(struct resource_record);
        cursor = parse_resource_record(cursor, data, additionals[i]);
    }

    dest->header = header;
    dest->question = questions;
    dest->answer = answers;
    dest->authority = auths;
    dest->additional = additionals;

    return dest;
}

// For arrays where we need to know the length.
struct bytearray {
    int length;
    int[] bytes;
};

typedef struct bytearray* bytearray;

bytearray write_message(struct message* input)
//@requires input != NULL;
//@ensures \result != NULL;
{
    int qdcount = input -> header -> qdcount;
    int ancount = input -> header -> ancount;
    int nscount = input -> header -> nscount;
    int arcount = input -> header -> arcount;

    int headerBits = 6 * 16;
    int numBits = headerBits;

    for (int i = 0; i < qdcount; i++) {
        numBits += countBitsQuestion(input -> question[i]);
    }
    for (int i = 0; i < ancount; i++) {
        numBits += countBitsRR(input -> answer[i]);
    }

    for (int i = 0; i < nscount; i++) {
        numBits += countBitsRR(input -> authority[i]);
    }
    for (int i = 0; i < arcount; i++) {
        numBits += countBitsRR(input -> additional[i]);
    }

    // multiplied by 2 just in case ;-)
    int[] destData = alloc_array(int, (numBits/32)*2);
    int cursor = 0;
    cursor = print_header (cursor, destData, input -> header);
    for (int i = 0; i < qdcount; i++) {
        cursor = print_question (cursor, destData, input -> question[i]);
    }
    for (int i = 0; i < ancount; i++) {
        cursor = print_resource_record (cursor, destData, input -> answer[i]);
    }
    for (int i = 0; i < nscount; i++) {
        cursor = print_resource_record (cursor, destData, input -> authority[i]);
    }
    for (int i = 0; i < arcount; i++) {
        cursor = print_resource_record (cursor, destData, input -> additional[i]);
    }

    bytearray dest = alloc(struct bytearray);
    dest->length = numBits/32;
    dest->bytes = destData;

    return dest;
}


void print_bytearray(bytearray bs)
//@requires bs != NULL;
{
    print("[");
    for (int i = 0; i < bs->length; i++) {
        if (i != 0) {
            print(" | ");
        }
        else {
            print(" ");
        }

        printint(bs->bytes[i]);
    }
    print(" ]");
    flush();
}

void assert_bytes_eq(bytearray bs1, bytearray bs2)
//@requires bs1 != NULL && bs2 != NULL;
{
    int l1 = bs1->length;
    int l2 = bs2->length;

    if (l1 != l2) {
        error("Byte arrays of different lengths");
    }

    for (int i = 0; i < l1; i++) {
        int x1 = bs1->bytes[i];
        int x2 = bs2->bytes[i];

        if (x1 != x2) {
            print("Equating following two byte arrays: \n    ");
            print_bytearray(bs1);
            print("\nvs.\n    ");
            print_bytearray(bs2);
            print("\n");

            error("Test failed");
            //break;
        }
    }
}


void test_roundtrip(struct message* message)
//@requires message != NULL;
{
    bytearray bs = write_message(message);
    struct message* message2 = parse_message(bs->bytes);
    bytearray bs2 = write_message(message2);

    assert_bytes_eq(bs, bs2);
}
