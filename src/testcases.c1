#use <conio>

#use "header.c0"
#use "resource_record.c1"
#use "bit_utils.c0"
#use "question.c0"
#use "message.c1"


// The query with no entries in it.
struct message* test_case0(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=0;
    //This message is a query.
    test->header->qr=0;
    //standard query
    test->header->opcode=0;
    //just valid in answers
    test->header->aa=0;
    //not truncated
    test->header->tc=0;

    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=0;
    test->header->ancount=0;
    test->header->nscount=0;
    test->header->arcount=0;

    /*question part*/
    struct question*[] questions = alloc_array(struct question*, 0);
    test->question= questions;
    /*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 0);
    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;
    return test;
}

struct message* test_case1(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=1;
    //This message is a query.
    test->header->qr=0;
    //standard query
    test->header->opcode=0;
    //just valid in answers
    test->header->aa=0;
    //not truncated
    test->header->tc=0;
    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=1;
    test->header->ancount=0;
    test->header->nscount=0;
    test->header->arcount=0;

/*question part*/
    struct question*[] questions = alloc_array(struct question*, 1);
    struct question* q = alloc(struct question);
    domain_name name = domain_cons("A", domain_nil());
    q->qname=name;
    q->qtype=14;
    q->qclass=1;
    questions[0]=q;
    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 0);
    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;
    return test;
}

struct message* test_case2(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=2;
    //This message is a query.
    test->header->qr=0;
    //standard query
    test->header->opcode=0;
    //just valid in answers
    test->header->aa=0;
    //not truncated
    test->header->tc=0;
    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=1;
    test->header->ancount=0;
    test->header->nscount=0;
    test->header->arcount=0;

/*question part*/
    struct question*[] questions = alloc_array(struct question*, 1);
    struct question* q = alloc(struct question);
    q->qname=domain_cons("c", domain_cons("e", domain_nil()));
    q->qtype=14;
    q->qclass=1;
    questions[0]=q;
    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 0);
    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;
    return test;
}
struct message* test_case3(){
    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=2;
    //This message is a query.
    test->header->qr=0;
    //standard query
    test->header->opcode=0;
    //just valid in answers
    test->header->aa=0;
    //not truncated
    test->header->tc=0;
    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=1;
    test->header->ancount=0;
    test->header->nscount=0;
    test->header->arcount=0;

/*question part*/
    struct question*[] questions = alloc_array(struct question*, 1);
    struct question* q = alloc(struct question);
    q->qname=domain_cons("cmu",domain_cons("edu",domain_nil()));
    q->qtype=14;
    q->qclass=1;
    questions[0]=q;
    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 0);
    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;
    return test;
}

struct message* test_case4(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=4;
    //This message is a query.
    test->header->qr=0;
    //standard query
    test->header->opcode=0;
    //just valid in answers
    test->header->aa=0;
    //not truncated
    test->header->tc=0;
    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=2;
    test->header->ancount=0;
    test->header->nscount=0;
    test->header->arcount=0;

/*question part*/
    struct question*[] questions = alloc_array(struct question*, 2);
    struct question* q1 = alloc(struct question);
    q1->qname=domain_cons("com", domain_cons("google", domain_nil()));
    q1->qtype=14;
    q1->qclass=1;
    questions[0]=q1;

    struct question* q2 = alloc(struct question);
    q2->qname=domain_cons("cmu", domain_cons("edu", domain_nil()));
    q2->qtype=14;
    q2->qclass=1;
    questions[1]=q2;


    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 0);
    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;
    return test;
}

struct message* test_case5(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=5;
    //This message is a response.
    test->header->qr=1;
    //standard query
    test->header->opcode=1;
    //just valid in answers
    test->header->aa=1;
    //not truncated
    test->header->tc=0;
    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=0;
    test->header->ancount=1;
    test->header->nscount=0;
    test->header->arcount=0;

/*question part*/
    struct question*[] questions = alloc_array(struct question*, 0);
    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 1);
    struct resource_record* a1 = alloc(struct resource_record);
    a1->name=domain_cons("com", domain_cons("google", domain_nil()));
    //type_A
    a1->type=type_A();
    a1->class=1;
    a1->ttl=1;
    a1->rd_length=4;
    struct rr_A* r = alloc(struct rr_A);

    r->address=2333334;
    a1->rdata = (void*)r;
    answers[0]=a1;

    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;

    return test;


}

struct message* test_case6(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=6;
    //This message is a response.
    test->header->qr=1;
    //standard query
    test->header->opcode=1;
    //just valid in answers
    test->header->aa=0;
    //not truncated
    test->header->tc=0;
    //no recursion
    test->header->rd=0;
    test->header->ra=0;
    test->header->z=0;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=0;
    test->header->ancount=1;
    test->header->nscount=0;
    test->header->arcount=0;

/*question part*/
    struct question*[] questions = alloc_array(struct question*, 0);
    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 1);
    struct resource_record* a1 = alloc(struct resource_record);
    a1->name=domain_cons("com", domain_cons("google", domain_nil()));

    //type_txt
    a1->type=16;
    a1->class=255;
    a1->ttl=52;
    a1->rd_length=16;
    // struct rr_A* r = alloc(struct rr_A);
    rr_txt* txt = alloc(rr_txt);
    *txt = rr_txt_cons("com", rr_txt_cons("gig", rr_txt_nil()));

 
    a1->rdata = (void*)txt;

    answers[0]=a1;

    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 0);
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 0);
    test->additional= additionals;

    return test;
}

struct message* test_case7(){

    struct message* test = alloc(struct message);
    struct header* header = alloc(struct header);
    test->header=header;
    /*header part*/
    test->header->id=7;
    //This message is a response.
    test->header->qr=1;
    //standard query
    test->header->opcode=1;
    //just valid in answers
    test->header->aa=1;
    //not truncated
    test->header->tc=1;
    //no recursion
    test->header->rd=1;
    test->header->ra=1;
    test->header->z=1;
    //just for responses
    test->header->rcode=0;
    test->header->qdcount=2;
    test->header->ancount=2;
    test->header->nscount=2;
    test->header->arcount=2;

/*question part*/
        struct question*[] questions = alloc_array(struct question*, 2);
    struct question* q1 = alloc(struct question);
    q1->qname=domain_cons("com", domain_cons("google", domain_nil()));
    q1->qtype=14;
    q1->qclass=1;
    questions[0]=q1;

    struct question* q2 = alloc(struct question);
    q2->qname=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));
    q2->qtype=14;
    q2->qclass=1;
    questions[1]=q2;


    test->question= questions;

/*answer part*/
    struct resource_record*[] answers = alloc_array(struct resource_record*, 2);
    struct resource_record* a1 = alloc(struct resource_record);
    a1->name=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    //type_txt
    a1->type=5;
    a1->class=4;
    a1->ttl=2147483648;
    //221626252;
    a1->rd_length=16;
    // struct rr_A* r = alloc(struct rr_A);
    domain_name* dname = alloc(domain_name);
   *dname= domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    a1->rdata = (void*) dname;
dname=(domain_name*)a1->rdata;

    answers[0]=a1;

  struct resource_record* a2 = alloc(struct resource_record);
    a2->name=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    //type_txt
    a2->type=16;
    a2->class=14;
    a2->ttl=22512;
    a2->rd_length=16;
    // struct rr_A* r = alloc(struct rr_A);
    rr_txt* txt1 = alloc(rr_txt);
    *txt1 = rr_txt_cons("com", rr_txt_cons("gig", rr_txt_nil()));

    a2->rdata = (void*)txt1;

    answers[1]=a2;

    test->answer= answers;
    /*authority part*/
    struct resource_record*[] authorities = alloc_array(struct resource_record*, 2);
    struct resource_record* u1 = alloc(struct resource_record);
    u1->name=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    //type_txt
    u1->type=16;
    u1->class=4;
    u1->ttl=2212;
    u1->rd_length=6;
    // struct rr_A* r = alloc(struct rr_A);
    rr_txt* txtu = alloc(rr_txt);
    *txtu = rr_txt_cons("com", rr_txt_cons("gig", rr_txt_nil()));

    u1->rdata = (void*)txtu;

    authorities[0]=u1;

  struct resource_record* u2 = alloc(struct resource_record);
    u2->name=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    //type_txt
    u2->type=16;
    u2->class=4;
    u2->ttl=221;
    u2->rd_length=6;
    // struct rr_A* r = alloc(struct rr_A);
    rr_txt* txtu1 = alloc(rr_txt);
    *txtu1 = rr_txt_cons("com", rr_txt_cons("gig", rr_txt_nil()));

    u2->rdata = (void*)txtu1;

    authorities[1]=u2;

  
    test->authority= authorities;
    /*additional part*/
    struct resource_record*[] additionals = alloc_array(struct resource_record*, 2);

    struct resource_record* d1 = alloc(struct resource_record);
    d1->name=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    //type_txt
    d1->type=16;
    d1->class=4;
    d1->ttl=2216;
    d1->rd_length=6;
    // struct rr_A* r = alloc(struct rr_A);
    rr_txt* txtd = alloc(rr_txt);
    *txtd = rr_txt_cons("com", rr_txt_cons("gig", rr_txt_nil()));

    d1->rdata = (void*)txtd;

    additionals[0]=d1;

  struct resource_record* d2 = alloc(struct resource_record);
    d2->name=domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    //type_txt
    d2->type=12;
    d2->class=4;
    d2->ttl=216;
    d2->rd_length=6;

   domain_name* dname1 = alloc(domain_name);
   *dname1= domain_cons("cs", domain_cons("cmu", domain_cons("edu", domain_nil())));

    d2->rdata = (void*) dname1;
dname1=(domain_name*)d2->rdata;


    additionals[1]=d2;

    test->additional= additionals;

    return test;
}