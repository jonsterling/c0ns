#use "bit_utils.c0"
#use <conio>
#use <string>

struct domain_name {
    string label;
    struct domain_name* next;
};

typedef struct domain_name* domain_name;

int domain_octets(domain_name name) {
    if (name == NULL) {
        return 2;
    }

    // include length octet!
    int lblSize = 1 + string_length(name->label);
    return lblSize + domain_octets(name->next);
}

domain_name domain_nil() {
    return NULL;
}

domain_name domain_cons(string lbl, domain_name name) {
    domain_name d = alloc(struct domain_name);
    d->label = lbl;
    d->next = name;
    return d;
}

domain_name parse_domain_name(cursor cur, int[] data)
//@requires cur != NULL;
//@requires cursor_get(cur) < \length(data) * 32;
//@requires cursor_get(cur) % 8 == 0;
{
    int orig_ix = cursor_get(cur);
    int len = read_bits(cur, data, 8);

    if (len == 0) {
        return domain_nil();
    }

    if (len >= 0xc0) {
        // case: pointer
        // read the last 14 bits of this byte as a pointer into the message (in octets)
        cursor_set(cur, orig_ix + 2);
        int ptr = read_bits(cur, data, 14);

        cursor ptrCursor = cursor_new(ptr * 8);
        return parse_domain_name(ptrCursor, data);
    }

    // now we parse an ordinary label; we retreat by one octet so that read_string can see the length cell
    cursor_retreat(cur, 8);
    string lbl = read_string(cur, data);
    return domain_cons(lbl, parse_domain_name(cur, data));
}

void debug_domain_name(domain_name dn) {
    if (dn == NULL) {
        print("[]");
    }
    else {
        print(dn->label);
        print(".");
        debug_domain_name(dn->next);
    }
}



void print_domain_name(cursor cur, int[] data, domain_name d)
//@requires cur != NULL;
//@requires cursor_get(cur) < \length(data) * 32;
//@requires cursor_get(cur) % 8 == 0;
{
    if (d == NULL) {
        write_bits(cur, data, 8, 0);
        return;
    }

    write_string(cur, data, d->label);
    print_domain_name(cur, data, d->next);
}

void assert_domain_eq(domain_name dn1, domain_name dn2) {
    if (dn1 == NULL && dn2 == NULL) {
        return;
    }

    if (dn1 == NULL) {
        error("first domain was NULL, but second was not");
    }

    if (dn2 == NULL) {
        debug_domain_name(dn1);
        error("second domain was NULL, but first was not");
    }

    assert(dn1 != NULL && dn2 != NULL);
    assert(string_equal(dn1->label, dn2->label));
    assert_domain_eq(dn1->next, dn2->next);
}

void test_domain_name() {
    domain_name dn = domain_cons("ab", domain_cons("welp", domain_nil()));
    int[] data = alloc_array(int, 30);
    print_domain_name(cursor_new(0), data, dn);
    domain_name dn2 = parse_domain_name(cursor_new(0), data);

    println("* test_domain_name passed");
}
