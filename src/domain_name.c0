#use "bit_utils.c0"

struct domain_name {
    string label;
    int size;
    struct domain_name* next;
};

typedef struct domain_name* domain_name;

int domain_size(domain_name name) {
    if (name == NULL) {
        return 0;
    }

    return name->size;
}

domain_name domain_nil() {
    return NULL;
}

domain_name domain_cons(string lbl, domain_name name, int len) {
    domain_name d = alloc(struct domain_name);
    d->label = lbl;
    d->next = name;
    d->size = domain_size(name) + len;
    return d;
}

domain_name parse_domain_name_aux(domain_name name, int* cursor, int[] data) {
    int* len = alloc(int);

    int orig_cursor = *cursor;

    *cursor = read_bits(*cursor, data, 8, len);

    if (*len == 0) {
        return name;
    }

    if (*len >= 0xc0) {
        // case: pointer
        int* ptr = alloc(int);
        // read the remainder of the first 16 bits as a pointer to an offset in octets
        *cursor = read_bits(orig_cursor + 2, data, 14, ptr);
        // read the last label of the domain name from the pointer:

        int* ptrCursor = alloc(int);
        *ptrCursor = *ptr * 8;

        return parse_domain_name_aux(name, ptrCursor, data);
    }

    // char arrays by convention must end in a null cell, so we allocate *len + 1.
    char[] chars = alloc_array(char, *len + 1);

    // case: ordinary label
    // now '*len' specifies the number of octets in the label
    for (int i = 0; i < *len; i++) {
        int* octet = alloc(int);

        *cursor = read_bits(*cursor, data, 8, octet);
        chars[i] = char_chr(*octet);
    }


    string lbl = string_from_chararray(chars);
    return parse_domain_name_aux(domain_cons(lbl, name, *len*8), cursor, data);
}


domain_name parse_domain_name(int* cursorOut, int[] data) {
    return parse_domain_name_aux(domain_nil(), cursorOut, data);
}

int print_domain_name(int cursor, int[] data, domain_name d) {
    domain_name ptr;
    domain_name tail=NULL;
    int x=0;
    while (d!=tail) {
        ptr = d;
        while (ptr->next!=tail)
            ptr = ptr -> next;
        cursor = write_string (cursor, data, ptr->label);
        x= ptr->size;
        tail = ptr;
    }

    cursor = write_bits(cursor, data, 8, 0); //final label, for root
    return cursor;
}
