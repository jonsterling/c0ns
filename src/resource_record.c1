#use <string>
#use "types.c0"
#use "class.c0"
#use "domain_name.c0"
#use "bit_utils.c0"
#use "cursor.c0"

struct rr_txt {
    string txt;
    struct rr_txt* next;
};

typedef struct rr_txt* rr_txt;

rr_txt rr_txt_nil() {
    return NULL;
}

rr_txt rr_txt_cons(string s, rr_txt txt) {
    rr_txt t = alloc(struct rr_txt);
    t->txt = s;
    t->next = txt;
    return t;
}

struct rr_hinfo {
    string cpu;
    string os;
};

typedef struct rr_hinfo* rr_hinfo;

struct rr_mx {
    int preference;
    domain_name exchange;
};

typedef struct rr_mx* rr_mx;

struct rr_soa {
    domain_name mname;
    domain_name rname;
    int serial;
    int refresh;
    int retry;
    int expire;
    int minimum;
};

typedef struct rr_soa* rr_soa;

struct rr_A {
    int address;
};

typedef struct rr_A* rr_A;

struct rr_wks {
    int address;
    int protocol;
    int[] bitmap;
};

typedef struct rr_wks* rr_wks;

struct resource_record {
    domain_name name; // a domain name, subject to compression
    type_ type;
    class class;
    int ttl;
    int rd_length;
    void* rdata; // classified by 'type'
};

typedef struct resource_record* resource_record;


rr_hinfo parse_hinfo(cursor cur, int[] data)
//@requires cursor_get(cur) <= \length(data) * 32;
{
    struct rr_hinfo* dest = alloc(struct rr_hinfo);
    dest->cpu = read_string(cur, data);
    dest->os = read_string(cur, data);

    return dest;
}

rr_mx parse_mx(cursor cur, int[] data)
//@requires cursor_get(cur) <= \length(data) * 32;
{
    struct rr_mx* dest = alloc(struct rr_mx);
    dest->preference = read_bits(cur, data, 16);
    dest->exchange = parse_domain_name(cur, data);
    return dest;
}

rr_soa parse_soa(cursor cur, int[] data)
//@requires cursor_get(cur) <= \length(data) * 32;
{
    struct rr_soa* dest = alloc(struct rr_soa);
    dest->mname = parse_domain_name(cur, data);
    dest->rname = parse_domain_name(cur, data);
    dest->serial = read_bits(cur, data, 32);
    dest->refresh = read_bits(cur, data, 32);
    dest->retry = read_bits(cur, data, 32);
    dest->expire = read_bits(cur, data, 32);
    return dest;
}

rr_txt parse_txt(cursor cur, int end, int[] data)
//@requires cursor_get(cur) <= \length(data) * 32;
{
    int origIx = cursor_get(cur);
    string s = read_string(cur, data);
    if (cursor_get(cur) > end) {
        cursor_set(cur, origIx);
        return rr_txt_nil();
    }

    rr_txt init = parse_txt(cur, end, data);
    return rr_txt_cons(s, init);
}

rr_A parse_A(cursor cur, int[] rdata)
//@requires cursor_get(cur) <= \length(rdata) * 32;
{
    struct rr_A* dest = alloc(struct rr_A);
    dest->address = read_bits(cur, rdata, 32);
    return dest;
}

rr_wks parse_wks(cursor cur, int[] rdata)
//@requires cursor_get(cur) <= \length(rdata) * 32;
{
    error("TODO: wks not yet supported");
}

void* parse_rdata(cursor cur, int[] data, type_ type, int len)
//@ensures \result != NULL;
//@requires cursor_get(cur) <= \length(data) * 32;
//@requires cursor_get(cur) % 8 == 0;
{
    if (type == type_cname()) {
        return (void*)parse_domain_name(cur, data);
    }
    else if (type == type_hinfo()) {
        return (void*)parse_hinfo(cur, data);
    }
    else if (type == type_mx()) {
        return (void*)parse_mx(cur, data);
    }
    else if (type == type_ptr()) {
        return (void*)parse_domain_name(cur, data);
    }
    else if (type == type_soa()) {
        return (void*)parse_soa(cur, data);
    }
    else if (type == type_txt()) {
        return (void*)parse_txt(cur, cursor_get(cur) + len * 8, data);
    }
    else if (type == type_A()) {
        return (void*)parse_A(cur, data);
    }
    else if (type == type_wks()) {
        error("TODO: wks");
    }
    else {
        error("parse_rdata: Unsupported RR type");
    }
}


void write_rr_txt(cursor cur, int[] data, rr_txt t)
//@requires cursor_get(cur) <= \length(data) * 32;
{
    if (t == NULL) {
        return;
    }

    write_string(cur, data, t->txt);
    write_rr_txt(cur, data, t->next);
}

void write_rdata(cursor cur, int[] data, type_ type, void* rdata)
//@requires cursor_get(cur) <= \length(data) * 32;
{
    //TODO: this block needs to be checked
    if (type == type_cname()) {
        write_domain_name(cur, data, (domain_name)rdata);
    }
    else if (type == type_hinfo()) {
        write_string(cur, data, ((rr_hinfo)rdata)->cpu);
        write_string(cur, data, ((rr_hinfo)rdata)->os);
    }
    else if (type == type_mx()) {
        write_bits(cur, data, 16, ((rr_mx)rdata)->preference);
        write_domain_name(cur, data, ((rr_mx)rdata)->exchange);
    }
    else if (type == type_ptr()) {
        write_domain_name(cur, data, (domain_name)rdata);
    }
    else if (type == type_soa()) {
        write_domain_name(cur, data, ((rr_soa)rdata)->mname);
        write_domain_name(cur, data, ((rr_soa)rdata)->rname);
        write_bits(cur, data, 32, ((rr_soa)rdata)->serial);
        write_bits(cur, data, 32, ((rr_soa)rdata)->refresh);
        write_bits(cur, data, 32, ((rr_soa)rdata)->retry);
        write_bits(cur, data, 32, ((rr_soa)rdata)->expire);
    }

    else if (type == type_txt()) {
        write_rr_txt(cur, data, (rr_txt)rdata);
    }
    else if (type == type_A()) {
        write_bits(cur, data, 32, ((rr_A)rdata)->address);
    }
    else if (type == type_wks()) {
        error("TODO: wks");
    }
    else {
        error("write_rdata: Unsupported RR type");
    }
}

void write_resource_record(cursor cur, int[] data, resource_record rr)
//@requires rr != NULL;
//@requires cursor_get(cur) <= \length(data) * 32;
{
    write_domain_name(cur, data, rr->name);
    write_bits(cur, data, 16, rr->type);
    write_bits(cur, data, 16, rr->class);
    write_bits(cur, data, 32, rr->ttl);
    write_bits(cur, data, 16, rr->rd_length);
    write_rdata(cur, data, rr->type, rr->rdata);
}

resource_record parse_resource_record(cursor cur, int[] data)
//@ensures \result != NULL;
//@requires cursor_get(cur) <= \length(data) * 32;
{
    resource_record rr = alloc(struct resource_record);
    rr->name = parse_domain_name(cur, data);
    rr->type = read_bits(cur, data, 16);
    rr->class = read_bits(cur, data, 16);
    rr->ttl = read_bits(cur, data, 32);
    rr->rd_length = read_bits(cur, data, 16);
    rr->rdata = parse_rdata(cur, data, rr->type, rr->rd_length);
    return rr;
}

int resource_record_octets(resource_record rr)
//@requires rr != NULL;
{
    return domain_octets(rr->name) + 2 + 2 + 4 + 2 + rr->rd_length;
}
